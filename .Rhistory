# Boxplot of resp based on temp missingness
boxplot(resp ~ temp_missing, data = df, main = "resp by temp missingness")
# Test if mean resp differs
t.test(resp ~ temp_missing, data = df)
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
# Remove rows with temp below -5 as outliers
#df <- df[df$temp > -5, ]
library(readr)
library(dplyr)
glimpse(df)
sum(df$trenched == "False")
sum(df$trenched == "True")
sum(df$trenched == "")
# We can see that the missing values are found in these 3 sites
df %>%
group_by(site) %>%
summarise(empty_count = sum(trenched== "", na.rm = FALSE))
# Let's change them too False and then make a boolean vector out of it
df$trenched <- ifelse(df$trenched == "True", TRUE,
ifelse(df$trenched %in% c("", "False"), FALSE, NA))
df$trenched <- as.logical(df$trenched)
df %>%
group_by(site) %>%
summarise(false_count = sum(trenched==FALSE, na.rm=TRUE),
true_count = sum(trenched==TRUE, na.rm=TRUE))
# Let's inspect the temperature variable
summary(df$temp)
summary(df$resp)
sapply(df, function(x) mean(is.na(x)))
df$temp_missing <- is.na(df$temp)
# Boxplot of resp based on temp missingness
boxplot(resp ~ temp_missing, data = df, main = "resp by temp missingness")
# Test if mean resp differs
t.test(resp ~ temp_missing, data = df)
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
# Remove rows with temp below -5 as outliers
df <- df[df$temp > -5, ]
table(df$site, is.na(df$temp))
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
rowSums(df[df$temp > -5, ])
sum(df$temp < -5, na.rm = TRUE)
# Remove rows with temp below -5 as outliers
df <- df[df$temp > -5, ]
table(df$site, is.na(df$temp))
# Let's inspect the temperature variable
summary(df$temp)
summary(df$resp)
sapply(df, function(x) mean(is.na(x)))
df$temp_missing <- is.na(df$temp)
# Boxplot of resp based on temp missingness
boxplot(resp ~ temp_missing, data = df, main = "resp by temp missingness")
is.na(df$temp)
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
sum(df$temp < -5, na.rm = TRUE)
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
sum(df$temp < -5, na.rm = TRUE)
# Remove rows with temp below -5 as outliers
df <- df[df$temp > -5 | is.na(df$temp), ]
table(df$site, is.na(df$temp))
library(readr)
library(dplyr)
glimpse(df)
sum(df$trenched == "False")
sum(df$trenched == "True")
sum(df$trenched == "")
# We can see that the missing values are found in these 3 sites
df %>%
group_by(site) %>%
summarise(empty_count = sum(trenched== "", na.rm = FALSE))
# Let's change them too False and then make a boolean vector out of it
df$trenched <- ifelse(df$trenched == "True", TRUE,
ifelse(df$trenched %in% c("", "False"), FALSE, NA))
df$trenched <- as.logical(df$trenched)
df %>%
group_by(site) %>%
summarise(false_count = sum(trenched==FALSE, na.rm=TRUE),
true_count = sum(trenched==TRUE, na.rm=TRUE))
# Let's inspect the temperature variable
summary(df$temp)
summary(df$resp)
sapply(df, function(x) mean(is.na(x)))
df$temp_missing <- is.na(df$temp)
# Boxplot of resp based on temp missingness
boxplot(resp ~ temp_missing, data = df, main = "resp by temp missingness")
# Test if mean resp differs
t.test(resp ~ temp_missing, data = df)
library(mice)
table(df$site, is.na(df$temp))
# Let's drop Kelheim and Saint Mitre
df <- df[!(df$site %in% c("Kelheim-Parsberg", "Saint Mitre")), ]
# Perform imputation (default method for numeric is pmm)
# Step 1: Create method vector
methods <- make.method(df)
methods[] <- ""  # Don't impute anything by default
methods["temp"] <- "pmm"  # Only impute temperature using predictive mean matching
# Step 2: Define prediction matrix
# lets create a prediction matrix to include only relevant variables
pred <- make.predictorMatrix(df)
# Zero out all predictors
pred[,] <- 0
# Only allow these variables to predict temperature
pred["temp", c("day_year", "resp", "plot_id", "site")] <- 1
# we need to factorize "site"
df$site <- as.factor(df$site)
# Step 3: Run mice with the custom method and predictor matrix
imputed <- mice(df, method = methods, predictorMatrix = pred, m = 5, seed = 123)
# Step 4: Extract imputed dataset (use 1st imputation for example)
df_imputed <- complete(imputed, 1)
sum(is.na(df_imputed$temp))
imputed$loggedEvents
trenched_df_imputed <- df_imputed[df_imputed$trenched==TRUE,]
untrenched_df_imputed <- df_imputed[df_imputed$trenched==FALSE,]
library(ggplot2)
for (i in c("trenched", "untrenched")) {
name <- paste0(i, "_df_imputed")
n_sites <- length(unique(get(name)$site))
ggplot(data=get(name), aes(x = temp, y = resp, color = site, shape = site)) +
geom_point(size = 1, alpha = 0.3, na.rm = TRUE) +
scale_shape_manual(values = 1:n_sites) +
labs(
x = "Soil temperature at 5cm",
y = "CO2 flux",
title = paste0(name,": Scatterplot of co2 flux vs. soil temperature")
) +
theme_minimal() -> p
print(p)
}
trenched_df <- df[df$trenched==TRUE,]
untrenched_df <- df[df$trenched==FALSE,]
library(ggplot2)
for (i in c("trenched", "untrenched")) {
name <- paste0(i, "_df")
n_sites <- length(unique(get(name)$site))
ggplot(data=get(name), aes(x = temp, y = resp, color = site, shape = site)) +
geom_point(size = 1, alpha = 0.3, na.rm = TRUE) +
scale_shape_manual(values = 1:n_sites) +
labs(
x = "Soil temperature at 5cm",
y = "CO2 flux",
title = paste0(name,": Scatterplot of co2 flux vs. soil temperature")
) +
theme_minimal() -> p
print(p)
}
original <- df$temp
imputed <- df_imputed$temp
ggplot() +
geom_density(aes(x = original), color = "red", na.rm = TRUE) +
geom_density(aes(x = imputed), color = "blue") +
labs(title = "Temperature Distributions: Original vs. Imputed",
x = "Temperature", y = "Density") +
theme_minimal()
library(quantreg)
# pseudo r squared (Koenker & Machado pseudo R^2)
rho <- function(tau, u) {
u * (tau - (u < 0))
}
# Custom function that returns rq model and pseudo R^2
rq_with_pseudo_r2 <- function(formula, tau, data) {
# Fit full and null models
full_model <- rq(formula, tau = tau, data = data)
null_model <- rq(update(formula, . ~ 1), tau = tau, data = data)
# Compute pseudo R^2
rho_full <- sum(rho(tau, residuals(full_model)))
rho_null <- sum(rho(tau, residuals(null_model)))
pseudo_r2 <- 1 - (rho_full / rho_null)
# Return both model and pseudo R^2
list(
model = full_model,
pseudo_r2 = pseudo_r2
)
}
tau_val <- 0.05
plot_qr <- function(data, tau_val, title_prefix = "") {
result <- rq_with_pseudo_r2(resp ~ temp, tau = tau_val, data = data)
n_obs <- sum(!is.na(data$resp) & !is.na(data$temp))
p <- ggplot(data, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3, na.rm = TRUE) +
geom_quantile(quantiles = tau_val, color = "red", size = 1) +
annotate("text", x = Inf, y = Inf,
label = paste0("R^2 = ", round(result$pseudo_r2, 3), "\nn = ", n_obs),
hjust = 1.1, vjust = 1.5, size = 4, color = "red") +
labs(
title = paste0(title_prefix, "Quantile Regression at ", tau_val*100, "th Percentile"),
x = "Soil temperature at 5cm",
y = "CO2 flux"
) +
theme_minimal()
print(paste0(title_prefix, "Quantile Regression Summary with tau=", tau_val))
print(summary(result$model))
print(paste0("Koenker & Machado Pseudo R-squared: ", round(result$pseudo_r2, 3)))
print(p)
return(result)
}
# Then call:
qr_full <- plot_qr(df_imputed, tau_val)
qr_trenched <- plot_qr(trenched_df_imputed, tau_val, "Trenched: ")
qr_untrenched <- plot_qr(untrenched_df_imputed, tau_val, "Untrenched: ")
# 0.05 quantile regressions
# Full data set
#qr_model <- rq_with_pseudo_r2(resp ~ temp, data = df, tau = tau_val)
#summary(qr_model$model)
#print(qr_model$pseudo_r2)
#n_obs <- sum(!is.na(df$resp) & !is.na(df$temp))
#ggplot(df, aes(x = temp, y = resp)) +
#  geom_point(alpha = 0.3) +
#  geom_quantile(quantiles = tau_val, color = "red", size = 1) +
#  annotate("text", x = Inf, y = Inf,
#           label = paste0("R^2 = ", round(qr_model$pseudo_r2, 3), "\nn = ", n_obs),
#           hjust = 1.1, vjust = 1.5, size = 4, color = "red") +
#  labs(
#    title = paste0("Quantile Regression at ", tau_val*100, "th Percentile"),
#    x = "Soil temperature at 5cm",
#    y = "CO2 flux"
#  ) +
#  theme_minimal()
#
## Trenched data
#qr_model_t <- rq_with_pseudo_r2(resp ~ temp, data = trenched_df, tau = tau_val)
#summary(qr_model_t$model)
#print(qr_model_t$pseudo_r2)
#n_obs <- sum(!is.na(trenched_df$resp) & !is.na(trenched_df$temp))
#
#ggplot(trenched_df, aes(x = temp, y = resp)) +
#  geom_point(alpha = 0.3) +
#  geom_quantile(quantiles = tau_val, color = "red", size = 1) +
#  annotate("text", x = Inf, y = Inf,
#           label = paste0("R^2 = ", round(qr_model_t$pseudo_r2, 3), "\nn = ", n_obs),
#           hjust = 1.1, vjust = 1.5, size = 4, color = "red") +
#  labs(
#    title = paste0("Trenched: ", "Quantile Regression at ", tau_val*100, "th Percentile"),
#    x = "Soil temperature at 5cm",
#    y = "CO2 flux"
#  ) +
#  theme_minimal()
#
## Untrenched data
#qr_model_ut <- rq_with_pseudo_r2(resp ~ temp, data = untrenched_df, tau = tau_val)
#summary(qr_model_ut$model)
#print(qr_model_ut$pseudo_r2)
#n_obs <- sum(!is.na(untrenched_df$resp) & !is.na(untrenched_df$temp))
#
#ggplot(untrenched_df, aes(x = temp, y = resp)) +
#  geom_point(alpha = 0.3) +
#  geom_quantile(quantiles = tau_val, color = "red", size = 1) +
#  annotate("text", x = Inf, y = Inf,
#           label = paste0("R^2 = ", round(qr_model_ut$pseudo_r2, 3), "\nn = ", n_obs),
#           hjust = 1.1, vjust = 1.5, size = 4, color = "red") +
#  labs(
#    title = paste0("Untrenched: ", "Quantile Regression at ", tau_val*100, "th Percentile"),
#    x = "Soil temperature at 5cm",
#    y = "CO2 flux"
#  ) +
#  theme_minimal()
#
# linear regression model
plot_lm <- function(data, title_prefix = "") {
# Fit the linear model
lm_model <- lm(resp ~ temp, data = data)
summary_model <- summary(lm_model)
r_squared <- summary_model$r.squared
# Count complete observations
n_obs <- sum(!is.na(data$resp) & !is.na(data$temp))
# Print summary and RÂ² similar to plot_qr
print(paste0(title_prefix, "Linear Regression Summary"))
print(summary_model)
print(paste0("R-squared: ", round(r_squared, 3)))
# Create and print plot
p <- ggplot(data, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3, na.rm = TRUE) +
geom_smooth(method = "lm", formula = y ~ x, color = "blue", se = TRUE, size = 1) +
annotate("text", x = Inf, y = Inf,
label = paste0("RÂ² = ", round(r_squared, 3), "\nn = ", n_obs),
hjust = 1.1, vjust = 1.5, size = 4, color = "blue") +
labs(
title = paste0(title_prefix, "Linear Regression of COâ Flux vs. Soil Temperature"),
x = "Soil temperature at 5cm",
y = "COâ flux"
) +
theme_minimal()
print(p)
# Return model and RÂ²
invisible(list(
model = lm_model,
r_squared = r_squared
))
}
# Full dataset
lm_full <- plot_lm(df_imputed)
# Trenched
lm_trenched <- plot_lm(trenched_df_imputed, "Trenched: ")
# Untrenched
lm_untrenched <- plot_lm(untrenched_df_imputed, "Untrenched: ")
#lm_model <- lm(resp ~ temp, data = df)
#summary(lm_model)
#r_squared <- summary(lm_model)$r.squared
#n_obs <- sum(!is.na(df$resp) & !is.na(df$temp))
#
#ggplot(df, aes(x = temp, y = resp)) +
#  geom_point(alpha = 0.3) +
#  geom_smooth(method = "lm", color = "blue", se = TRUE, size = 1) +
#  annotate("text", x = Inf, y = Inf,
#           label = paste0("R^2 = ", round(r_squared, 3), "\nn = ", n_obs),
#           hjust = 1.1, vjust = 1.5, size = 4, color = "blue") +
#  labs(
#    title = "Linear Regression at of CO2 Flux vs. Soil Temperature",
#    x = "Soil temperature at 5cm",
#    y = "CO2 flux"
#  ) +
#  theme_minimal()
quantiles <- c(0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
best_val <- numeric(length(quantiles))
names(best_val) <- quantiles
# Best model for full data
for (tau in quantiles) {
qr_full <- rq_with_pseudo_r2(formula = resp ~ temp, tau = tau, data = df_imputed)
best_val[as.character(tau)] <- qr_full$pseudo_r2
}
best_tau <- names(best_val)[which.max(best_val)]
print(paste("Best tau value is:", best_tau))
print(paste("The corresping pseudo r2 value for this tau is:", max(best_val)))
# Let's fit the quantile regression model for the best tau value 0.15
tau_val <- as.numeric(best_tau)
qr_full <- plot_qr(df_imputed, tau_val)
qr_trenched <- plot_qr(trenched_df_imputed, tau_val, "Trenched: ")
qr_untrenched <- plot_qr(untrenched_df_imputed, tau_val, "Untrenched: ")
df_thresh <- df_imputed
df_thresh$temp <- pmax(0, df_thresh$temp - 15)
mod_qr <- plot_qr(df_thresh, tau_val = 0.02)
# Best model for full data
for (tau in quantiles) {
qr_full <- rq_with_pseudo_r2(formula = resp ~ temp, tau = tau, data = df_thresh)
best_val[as.character(tau)] <- qr_full$pseudo_r2
}
best_tau <- names(best_val)[which.max(best_val)]
print(paste("Best tau value is:", best_tau))
print(paste("The corresping pseudo r2 value for this tau is:", max(best_val)))
# Let's fit the quantile regression model for the best tau value 0.15
tau_val <- as.numeric(best_tau)
qr_piecewise <- plot_qr(df_thresh, tau_val)
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 15
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.02, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 18
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.02, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 18
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.05, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 20
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.05, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 10
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.05, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 10
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.02, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
df_twoseg <- df_imputed
temp <- df_twoseg$temp
threshold <- 15
df_twoseg$temp_below <- pmin(temp, threshold)
df_twoseg$temp_above <- pmax(0, temp - threshold)
twoseg_model <- rq_with_pseudo_r2(resp ~ temp_below + temp_above, tau = 0.02, data=df_twoseg)
summary(twoseg_model$model)
print(twoseg_model$pseudo_r2)
coef <- coef(twoseg_model$model)
ggplot(df_twoseg, aes(x = temp, y = resp)) +
geom_point(alpha = 0.3) +
geom_line(aes(y = coef[1] + coef[2] * pmin(temp, threshold) + coef[3] * pmax(0, temp - threshold)), color = "red", size = 1) +
geom_vline(xintercept = threshold, linetype = "dashed") +
labs(title = "Two-segment Quantile Regression (Ï = 0.05)",
x = "Temperature",
y = "Respiration")
reticulate::repl_python()
reticulate::repl_python()
import seaborn as sns
import matplotlib.pyplot as plt
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
df <- read.csv("python_holisoils.csv", header = TRUE)
head(df)
sum(df$temp < -5, na.rm = TRUE)
# Remove rows with temp below -5 as outliers
df <- df[df$temp > -5 | is.na(df$temp), ]
table(df$site, is.na(df$temp))
library(readr)
library(dplyr)
glimpse(df)
sum(df$trenched == "False")
sum(df$trenched == "True")
sum(df$trenched == "")
# We can see that the missing values are found in these 3 sites
df %>%
group_by(site) %>%
summarise(empty_count = sum(trenched== "", na.rm = FALSE))
# Let's change them too False and then make a boolean vector out of it
df$trenched <- ifelse(df$trenched == "True", TRUE,
ifelse(df$trenched %in% c("", "False"), FALSE, NA))
df$trenched <- as.logical(df$trenched)
df %>%
group_by(site) %>%
summarise(false_count = sum(trenched==FALSE, na.rm=TRUE),
true_count = sum(trenched==TRUE, na.rm=TRUE))
# Let's inspect the temperature variable
summary(df$temp)
summary(df$resp)
sapply(df, function(x) mean(is.na(x)))
df$temp_missing <- is.na(df$temp)
# Boxplot of resp based on temp missingness
boxplot(resp ~ temp_missing, data = df, main = "resp by temp missingness")
# Test if mean resp differs
t.test(resp ~ temp_missing, data = df)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
import seaborn as sns
import seaborn as sns
reticulate::repl_python()
